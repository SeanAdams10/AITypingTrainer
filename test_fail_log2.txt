============================= test session starts =============================
platform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0 -- d:\OneDrive\Documents\SeanDev\AITypingTrainer\.venv\Scripts\python.exe
cachedir: .pytest_cache
PyQt5 5.15.11 -- Qt runtime 5.15.2 -- Qt compiled 5.15.2
rootdir: D:\OneDrive\Documents\SeanDev\AITypingTrainer
plugins: mock-3.14.0, qt-4.4.0
collecting ... collected 0 items / 1 error

=================================== ERRORS ====================================
________ ERROR collecting tests/desktop_ui/test_library_manager_qt.py _________

path = WindowsPath('D:/OneDrive/Documents/SeanDev/AITypingTrainer/tests/desktop_ui/test_library_manager_qt.py')
config = <_pytest.config.Config object at 0x00000295D27EDD30>

    def importtestmodule(
        path: Path,
        config: Config,
    ):
        # We assume we are only called once per module.
        importmode = config.getoption("--import-mode")
        try:
>           mod = import_path(
                path,
                mode=importmode,
                root=config.rootpath,
                consider_namespace_packages=config.getini("consider_namespace_packages"),
            )

.venv\Lib\site-packages\_pytest\python.py:493: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

path = WindowsPath('D:/OneDrive/Documents/SeanDev/AITypingTrainer/tests/desktop_ui/test_library_manager_qt.py')

    def import_path(
        path: str | os.PathLike[str],
        *,
        mode: str | ImportMode = ImportMode.prepend,
        root: Path,
        consider_namespace_packages: bool,
    ) -> ModuleType:
        """
        Import and return a module from the given path, which can be a file (a module) or
        a directory (a package).
    
        :param path:
            Path to the file to import.
    
        :param mode:
            Controls the underlying import mechanism that will be used:
    
            * ImportMode.prepend: the directory containing the module (or package, taking
              `__init__.py` files into account) will be put at the *start* of `sys.path` before
              being imported with `importlib.import_module`.
    
            * ImportMode.append: same as `prepend`, but the directory will be appended
              to the end of `sys.path`, if not already in `sys.path`.
    
            * ImportMode.importlib: uses more fine control mechanisms provided by `importlib`
              to import the module, which avoids having to muck with `sys.path` at all. It effectively
              allows having same-named test modules in different places.
    
        :param root:
            Used as an anchor when mode == ImportMode.importlib to obtain
            a unique name for the module being imported so it can safely be stored
            into ``sys.modules``.
    
        :param consider_namespace_packages:
            If True, consider namespace packages when resolving module names.
    
        :raises ImportPathMismatchError:
            If after importing the given `path` and the module `__file__`
            are different. Only raised in `prepend` and `append` modes.
        """
        path = Path(path)
        mode = ImportMode(mode)
    
        if not path.exists():
            raise ImportError(path)
    
        if mode is ImportMode.importlib:
            # Try to import this module using the standard import mechanisms, but
            # without touching sys.path.
            try:
                pkg_root, module_name = resolve_pkg_root_and_module_name(
                    path, consider_namespace_packages=consider_namespace_packages
                )
            except CouldNotResolvePathError:
                pass
            else:
                # If the given module name is already in sys.modules, do not import it again.
                with contextlib.suppress(KeyError):
                    return sys.modules[module_name]
    
                mod = _import_module_using_spec(
                    module_name, path, pkg_root, insert_modules=False
                )
                if mod is not None:
                    return mod
    
            # Could not import the module with the current sys.path, so we fall back
            # to importing the file as a single module, not being a part of a package.
            module_name = module_name_from_path(path, root)
            with contextlib.suppress(KeyError):
                return sys.modules[module_name]
    
            mod = _import_module_using_spec(
                module_name, path, path.parent, insert_modules=True
            )
            if mod is None:
                raise ImportError(f"Can't find module {module_name} at location {path}")
            return mod
    
        try:
            pkg_root, module_name = resolve_pkg_root_and_module_name(
                path, consider_namespace_packages=consider_namespace_packages
            )
        except CouldNotResolvePathError:
            pkg_root, module_name = path.parent, path.stem
    
        # Change sys.path permanently: restoring it at the end of this function would cause surprising
        # problems because of delayed imports: for example, a conftest.py file imported by this function
        # might have local imports, which would fail at runtime if we restored sys.path.
        if mode is ImportMode.append:
            if str(pkg_root) not in sys.path:
                sys.path.append(str(pkg_root))
        elif mode is ImportMode.prepend:
            if str(pkg_root) != sys.path[0]:
                sys.path.insert(0, str(pkg_root))
        else:
            assert_never(mode)
    
>       importlib.import_module(module_name)

.venv\Lib\site-packages\_pytest\pathlib.py:587: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

name = 'tests.desktop_ui.test_library_manager_qt', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                raise TypeError("the 'package' argument is required to perform a "
                                f"relative import for {name!r}")
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)

C:\Python\Python313\Lib\importlib\__init__.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

name = 'tests.desktop_ui.test_library_manager_qt', package = None, level = 0

>   ???

<frozen importlib._bootstrap>:1387: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

name = 'tests.desktop_ui.test_library_manager_qt'
import_ = <function _gcd_import at 0x00000295D17404A0>

>   ???

<frozen importlib._bootstrap>:1360: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

name = 'tests.desktop_ui.test_library_manager_qt'
import_ = <function _gcd_import at 0x00000295D17404A0>

>   ???

<frozen importlib._bootstrap>:1331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

spec = ModuleSpec(name='tests.desktop_ui.test_library_manager_qt', loader=<_pytest.assertion.rewrite.AssertionRewritingHook o...95D28997F0>, origin='D:\\OneDrive\\Documents\\SeanDev\\AITypingTrainer\\tests\\desktop_ui\\test_library_manager_qt.py')

>   ???

<frozen importlib._bootstrap>:935: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x00000295D28997F0>
module = <module 'tests.desktop_ui.test_library_manager_qt' from 'D:\\OneDrive\\Documents\\SeanDev\\AITypingTrainer\\tests\\desktop_ui\\test_library_manager_qt.py'>

    def exec_module(self, module: types.ModuleType) -> None:
        assert module.__spec__ is not None
        assert module.__spec__.origin is not None
        fn = Path(module.__spec__.origin)
        state = self.config.stash[assertstate_key]
    
        self._rewritten_names[module.__name__] = fn
    
        # The requested module looks like a test file, so rewrite it. This is
        # the most magical part of the process: load the source, rewrite the
        # asserts, and load the rewritten source. We also cache the rewritten
        # module code in a special pyc. We must be aware of the possibility of
        # concurrent pytest processes rewriting and loading pycs. To avoid
        # tricky race conditions, we maintain the following invariant: The
        # cached pyc is always a complete, valid pyc. Operations on it must be
        # atomic. POSIX's atomic rename comes in handy.
        write = not sys.dont_write_bytecode
        cache_dir = get_cache_dir(fn)
        if write:
            ok = try_makedirs(cache_dir)
            if not ok:
                write = False
                state.trace(f"read only directory: {cache_dir}")
    
        cache_name = fn.name[:-3] + PYC_TAIL
        pyc = cache_dir / cache_name
        # Notice that even if we're in a read-only directory, I'm going
        # to check for a cached pyc. This may not be optimal...
        co = _read_pyc(fn, pyc, state.trace)
        if co is None:
            state.trace(f"rewriting {fn!r}")
>           source_stat, co = _rewrite_test(fn, self.config)

.venv\Lib\site-packages\_pytest\assertion\rewrite.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

fn = WindowsPath('D:/OneDrive/Documents/SeanDev/AITypingTrainer/tests/desktop_ui/test_library_manager_qt.py')
config = <_pytest.config.Config object at 0x00000295D27EDD30>

    def _rewrite_test(fn: Path, config: Config) -> tuple[os.stat_result, types.CodeType]:
        """Read and rewrite *fn* and return the code object."""
        stat = os.stat(fn)
        source = fn.read_bytes()
        strfn = str(fn)
>       tree = ast.parse(source, filename=strfn)

.venv\Lib\site-packages\_pytest\assertion\rewrite.py:356: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

source = b'import pytest\nfrom PyQt5 import QtWidgets, QtCore\nfrom desktop_ui.library_manager import LibraryManagerUI\nfrom un...p_list.clear()\n    app.btn_del_snip.click()  # Should show warning, no crash\n    assert app.snip_list.count() == 0\n'
filename = 'D:\\OneDrive\\Documents\\SeanDev\\AITypingTrainer\\tests\\desktop_ui\\test_library_manager_qt.py'
mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "D:\OneDrive\Documents\SeanDev\AITypingTrainer\tests\desktop_ui\test_library_manager_qt.py", line 116
E           def __init__(self, *args, **kwargs):
E           ^^^
E       IndentationError: expected an indented block after class definition on line 115

C:\Python\Python313\Lib\ast.py:54: IndentationError

The above exception was the direct cause of the following exception:

cls = <class '_pytest.runner.CallInfo'>
func = <function pytest_make_collect_report.<locals>.collect at 0x00000295D5189C60>
when = 'collect', reraise = (<class 'KeyboardInterrupt'>, <class 'SystemExit'>)

    @classmethod
    def from_call(
        cls,
        func: Callable[[], TResult],
        when: Literal["collect", "setup", "call", "teardown"],
        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,
    ) -> CallInfo[TResult]:
        """Call func, wrapping the result in a CallInfo.
    
        :param func:
            The function to call. Called without arguments.
        :type func: Callable[[], _pytest.runner.TResult]
        :param when:
            The phase in which the function is called.
        :param reraise:
            Exception or exceptions that shall propagate if raised by the
            function, instead of being wrapped in the CallInfo.
        """
        excinfo = None
        start = timing.time()
        precise_start = timing.perf_counter()
        try:
>           result: TResult | None = func()

.venv\Lib\site-packages\_pytest\runner.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    def collect() -> list[Item | Collector]:
        # Before collecting, if this is a Directory, load the conftests.
        # If a conftest import fails to load, it is considered a collection
        # error of the Directory collector. This is why it's done inside of the
        # CallInfo wrapper.
        #
        # Note: initial conftests are loaded early, not here.
        if isinstance(collector, Directory):
            collector.config.pluginmanager._loadconftestmodules(
                collector.path,
                collector.config.getoption("importmode"),
                rootpath=collector.config.rootpath,
                consider_namespace_packages=collector.config.getini(
                    "consider_namespace_packages"
                ),
            )
    
>       return list(collector.collect())

.venv\Lib\site-packages\_pytest\runner.py:389: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Module test_library_manager_qt.py>

    def collect(self) -> Iterable[nodes.Item | nodes.Collector]:
>       self._register_setup_module_fixture()

.venv\Lib\site-packages\_pytest\python.py:549: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Module test_library_manager_qt.py>

    def _register_setup_module_fixture(self) -> None:
        """Register an autouse, module-scoped fixture for the collected module object
        that invokes setUpModule/tearDownModule if either or both are available.
    
        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with
        other fixtures (#517).
        """
        setup_module = _get_first_non_fixture_func(
>           self.obj, ("setUpModule", "setup_module")
        )

.venv\Lib\site-packages\_pytest\python.py:562: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Module test_library_manager_qt.py>

    @property
    def obj(self):
        """Underlying Python object."""
        obj = getattr(self, "_obj", None)
        if obj is None:
>           self._obj = obj = self._getobj()

.venv\Lib\site-packages\_pytest\python.py:284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Module test_library_manager_qt.py>

    def _getobj(self):
>       return importtestmodule(self.path, self.config)

.venv\Lib\site-packages\_pytest\python.py:546: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

path = WindowsPath('D:/OneDrive/Documents/SeanDev/AITypingTrainer/tests/desktop_ui/test_library_manager_qt.py')
config = <_pytest.config.Config object at 0x00000295D27EDD30>

    def importtestmodule(
        path: Path,
        config: Config,
    ):
        # We assume we are only called once per module.
        importmode = config.getoption("--import-mode")
        try:
            mod = import_path(
                path,
                mode=importmode,
                root=config.rootpath,
                consider_namespace_packages=config.getini("consider_namespace_packages"),
            )
        except SyntaxError as e:
>           raise nodes.Collector.CollectError(
                ExceptionInfo.from_current().getrepr(style="short")
            ) from e
E           _pytest.nodes.Collector.CollectError: .venv\Lib\site-packages\_pytest\python.py:493: in importtestmodule
E               mod = import_path(
E           .venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
E               importlib.import_module(module_name)
E           C:\Python\Python313\Lib\importlib\__init__.py:88: in import_module
E               return _bootstrap._gcd_import(name[level:], package, level)
E           <frozen importlib._bootstrap>:1387: in _gcd_import
E               ???
E           <frozen importlib._bootstrap>:1360: in _find_and_load
E               ???
E           <frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
E               ???
E           <frozen importlib._bootstrap>:935: in _load_unlocked
E               ???
E           .venv\Lib\site-packages\_pytest\assertion\rewrite.py:176: in exec_module
E               source_stat, co = _rewrite_test(fn, self.config)
E           .venv\Lib\site-packages\_pytest\assertion\rewrite.py:356: in _rewrite_test
E               tree = ast.parse(source, filename=strfn)
E           C:\Python\Python313\Lib\ast.py:54: in parse
E               return compile(source, filename, mode, flags,
E           E     File "D:\OneDrive\Documents\SeanDev\AITypingTrainer\tests\desktop_ui\test_library_manager_qt.py", line 116
E           E       def __init__(self, *args, **kwargs):
E           E       ^^^
E           E   IndentationError: expected an indented block after class definition on line 115

.venv\Lib\site-packages\_pytest\python.py:500: CollectError
=========================== short test summary info ===========================
ERROR tests/desktop_ui/test_library_manager_qt.py - _pytest.nodes.Collector.C...
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 1.03s ===============================
