============================= test session starts =============================
platform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0 -- d:\OneDrive\Documents\SeanDev\AITypingTrainer\.venv\Scripts\python.exe
cachedir: .pytest_cache
PyQt5 5.15.11 -- Qt runtime 5.15.2 -- Qt compiled 5.15.2
rootdir: D:\OneDrive\Documents\SeanDev\AITypingTrainer
plugins: mock-3.14.0, qt-4.4.0
collecting ... collected 11 items

tests/core/test_snippet_backend.py::test_snippet_creation_validation[Alpha-Some content-True] FAILED [  9%]
tests/core/test_snippet_backend.py::test_snippet_creation_validation[-Some content-False] FAILED [ 18%]
tests/core/test_snippet_backend.py::test_snippet_creation_validation[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-Content-False] FAILED [ 27%]
tests/core/test_snippet_backend.py::test_snippet_creation_validation[NonAscii\xe9-Content-False] FAILED [ 36%]
tests/core/test_snippet_backend.py::test_snippet_creation_validation[Alpha--False] FAILED [ 45%]
tests/core/test_snippet_backend.py::test_snippet_name_uniqueness[Unique1-Unique2-True] FAILED [ 54%]
tests/core/test_snippet_backend.py::test_snippet_name_uniqueness[DupName-DupName-False] FAILED [ 63%]
tests/core/test_snippet_backend.py::test_snippet_deletion FAILED         [ 72%]
tests/core/test_snippet_backend.py::test_snippet_update FAILED           [ 81%]
tests/core/test_snippet_backend.py::test_snippet_sql_injection FAILED    [ 90%]
tests/core/test_snippet_backend.py::test_snippet_long_content FAILED     [100%]

================================== FAILURES ===================================
__________ test_snippet_creation_validation[Alpha-Some content-True] __________

sample_category = 1, name = 'Alpha', content = 'Some content'
expect_success = True

    @pytest.mark.parametrize("name,content,expect_success", [
        ("Alpha", "Some content", True),
        ("", "Some content", False),
        ("A"*129, "Content", False),
        ("NonAsciiΘ", "Content", False),
        ("Alpha", "", False),
    ])
    def test_snippet_creation_validation(sample_category, name, content, expect_success):
        if expect_success:
            snippet = Snippet(category_id=sample_category, snippet_name=name, content=content)
>           assert snippet.save() is True

tests\core\test_snippet_backend.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <models.snippet.Snippet object at 0x0000023D9F38CEC0>

    def save(self) -> bool:
        """Save the snippet to the database."""
        # Validate all business rules
        self.validate_snippet(self.snippet_name, self.content)
        # Uniqueness check within category
        db = self.db
        query = (
            "SELECT snippet_id FROM text_snippets WHERE category_id = ? AND snippet_name = ?"
        )
        params = (self.category_id, self.snippet_name)
        results = db.execute_query(query, params)
        print(f"[DEBUG] Uniqueness check for category_id={self.category_id}, snippet_name='{self.snippet_name}': results={results}")
        # If creating, any result is a conflict. If updating, only conflict if not self.
        if self.snippet_id is None:
            if results:
                print(f"[DEBUG] Duplicate found when creating: {results}")
                raise ValueError("snippet_name must be unique within category")
        else:
            for row in results:
                if row['snippet_id'] != self.snippet_id:
                    print(f"[DEBUG] Duplicate found when updating: {row}")
                    raise ValueError("snippet_name must be unique within category")
        if self.snippet_id is None:
            # New snippet
            # First, insert the snippet metadata
            query1 = """
                INSERT INTO text_snippets (category_id, snippet_name)
                VALUES (?, ?)
            """
    
            snippet_id = self.db.execute_insert(query1, (self.category_id, self.snippet_name))
            if snippet_id <= 0:
                return False
    
            self.snippet_id = snippet_id
    
            # Now, handle the content by splitting it into parts
            max_part_size = 8000  # SQLite has limits on text size
            content_parts = []
    
            for i in range(0, len(self.content), max_part_size):
                part_content = self.content[i:i+max_part_size]
                part_number = i // max_part_size
                content_parts.append((self.snippet_id, part_number, part_content))
    
            # Insert all parts
            conn = self.db.get_connection()
            cursor = conn.cursor()
            for part in content_parts:
                cursor.execute(
                    "INSERT INTO snippet_parts (snippet_id, part_number, content) VALUES (?, ?, ?)",
                    part
                )
            conn.commit()
            conn.close()
            conn = self.db.get_connection()
            cursor = conn.cursor()
>           cursor.execute(
                "UPDATE text_snippets SET snippet_name = ?, created_at = ?, category_id = ? WHERE snippet_id = ?",
                (self.snippet_name, self.created_at, self.category_id, self.snippet_id)
            )
E           sqlite3.OperationalError: no such column: created_at

models\snippet.py:177: OperationalError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati0\test_db.sqlite3
---------------------------- Captured stdout call -----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati0\test_db.sqlite3
[DEBUG] Uniqueness check for category_id=1, snippet_name='Alpha': results=[]
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati0\test_db.sqlite3
____________ test_snippet_creation_validation[-Some content-False] ____________

sample_category = 1, name = '', content = 'Some content', expect_success = False

    @pytest.mark.parametrize("name,content,expect_success", [
        ("Alpha", "Some content", True),
        ("", "Some content", False),
        ("A"*129, "Content", False),
        ("NonAsciiΘ", "Content", False),
        ("Alpha", "", False),
    ])
    def test_snippet_creation_validation(sample_category, name, content, expect_success):
        if expect_success:
            snippet = Snippet(category_id=sample_category, snippet_name=name, content=content)
            assert snippet.save() is True
            loaded = Snippet.get_by_id(snippet.snippet_id)
            assert loaded is not None
            assert loaded.snippet_name == name
            assert loaded.content == content
        else:
>           snippet = Snippet(category_id=sample_category, snippet_name=name, content=content)

tests\core\test_snippet_backend.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
models\snippet.py:33: in __init__
    self.validate_snippet(snippet_name, content)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

snippet_name = '', content = 'Some content'

    @staticmethod
    def validate_snippet(snippet_name: str, content: str) -> None:
        """
        Validate snippet_name and content for all business rules.
        Raise ValueError for any violation.
        """
        # Non-blank
        if not snippet_name:
>           raise ValueError("snippet_name is required and cannot be blank")
E           ValueError: snippet_name is required and cannot be blank

models\snippet.py:96: ValueError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati1\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati1\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati1\test_db.sqlite3
_ test_snippet_creation_validation[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-Content-False] _

sample_category = 1
name = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
content = 'Content', expect_success = False

    @pytest.mark.parametrize("name,content,expect_success", [
        ("Alpha", "Some content", True),
        ("", "Some content", False),
        ("A"*129, "Content", False),
        ("NonAsciiΘ", "Content", False),
        ("Alpha", "", False),
    ])
    def test_snippet_creation_validation(sample_category, name, content, expect_success):
        if expect_success:
            snippet = Snippet(category_id=sample_category, snippet_name=name, content=content)
            assert snippet.save() is True
            loaded = Snippet.get_by_id(snippet.snippet_id)
            assert loaded is not None
            assert loaded.snippet_name == name
            assert loaded.content == content
        else:
>           snippet = Snippet(category_id=sample_category, snippet_name=name, content=content)

tests\core\test_snippet_backend.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
models\snippet.py:33: in __init__
    self.validate_snippet(snippet_name, content)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

snippet_name = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
content = 'Content'

    @staticmethod
    def validate_snippet(snippet_name: str, content: str) -> None:
        """
        Validate snippet_name and content for all business rules.
        Raise ValueError for any violation.
        """
        # Non-blank
        if not snippet_name:
            raise ValueError("snippet_name is required and cannot be blank")
        # ASCII-only
        if not all(ord(c) < 128 for c in snippet_name):
            raise ValueError("snippet_name must be ASCII-only")
        # Length restriction
        if len(snippet_name) > 128:
>           raise ValueError("snippet_name must be 128 characters or less")
E           ValueError: snippet_name must be 128 characters or less

models\snippet.py:102: ValueError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati2\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati2\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati2\test_db.sqlite3
________ test_snippet_creation_validation[NonAscii\xe9-Content-False] _________

sample_category = 1, name = 'NonAsciiΘ', content = 'Content'
expect_success = False

    @pytest.mark.parametrize("name,content,expect_success", [
        ("Alpha", "Some content", True),
        ("", "Some content", False),
        ("A"*129, "Content", False),
        ("NonAsciiΘ", "Content", False),
        ("Alpha", "", False),
    ])
    def test_snippet_creation_validation(sample_category, name, content, expect_success):
        if expect_success:
            snippet = Snippet(category_id=sample_category, snippet_name=name, content=content)
            assert snippet.save() is True
            loaded = Snippet.get_by_id(snippet.snippet_id)
            assert loaded is not None
            assert loaded.snippet_name == name
            assert loaded.content == content
        else:
>           snippet = Snippet(category_id=sample_category, snippet_name=name, content=content)

tests\core\test_snippet_backend.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
models\snippet.py:33: in __init__
    self.validate_snippet(snippet_name, content)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

snippet_name = 'NonAsciiΘ', content = 'Content'

    @staticmethod
    def validate_snippet(snippet_name: str, content: str) -> None:
        """
        Validate snippet_name and content for all business rules.
        Raise ValueError for any violation.
        """
        # Non-blank
        if not snippet_name:
            raise ValueError("snippet_name is required and cannot be blank")
        # ASCII-only
        if not all(ord(c) < 128 for c in snippet_name):
>           raise ValueError("snippet_name must be ASCII-only")
E           ValueError: snippet_name must be ASCII-only

models\snippet.py:99: ValueError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati3\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati3\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati3\test_db.sqlite3
_______________ test_snippet_creation_validation[Alpha--False] ________________

sample_category = 1, name = 'Alpha', content = '', expect_success = False

    @pytest.mark.parametrize("name,content,expect_success", [
        ("Alpha", "Some content", True),
        ("", "Some content", False),
        ("A"*129, "Content", False),
        ("NonAsciiΘ", "Content", False),
        ("Alpha", "", False),
    ])
    def test_snippet_creation_validation(sample_category, name, content, expect_success):
        if expect_success:
            snippet = Snippet(category_id=sample_category, snippet_name=name, content=content)
            assert snippet.save() is True
            loaded = Snippet.get_by_id(snippet.snippet_id)
            assert loaded is not None
            assert loaded.snippet_name == name
            assert loaded.content == content
        else:
>           snippet = Snippet(category_id=sample_category, snippet_name=name, content=content)

tests\core\test_snippet_backend.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
models\snippet.py:33: in __init__
    self.validate_snippet(snippet_name, content)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

snippet_name = 'Alpha', content = ''

    @staticmethod
    def validate_snippet(snippet_name: str, content: str) -> None:
        """
        Validate snippet_name and content for all business rules.
        Raise ValueError for any violation.
        """
        # Non-blank
        if not snippet_name:
            raise ValueError("snippet_name is required and cannot be blank")
        # ASCII-only
        if not all(ord(c) < 128 for c in snippet_name):
            raise ValueError("snippet_name must be ASCII-only")
        # Length restriction
        if len(snippet_name) > 128:
            raise ValueError("snippet_name must be 128 characters or less")
        # SQL injection / forbidden patterns
        import re
        forbidden_chars = [";", "'", "--", "/*", "*/"]
        forbidden_keywords = ["DROP", "SELECT", "INSERT", "DELETE", "UPDATE", "ALTER"]
        lowered = snippet_name.lower()
        # Special characters: block anywhere
        for char in forbidden_chars:
            if char in snippet_name:
                raise ValueError("snippet_name contains forbidden or dangerous characters/patterns")
        # SQL keywords: block as standalone words (word boundaries)
        for keyword in forbidden_keywords:
            if re.search(rf"\\b{keyword.lower()}\\b", lowered):
                raise ValueError("snippet_name contains forbidden or dangerous SQL keywords")
        # Content non-blank
        if not content:
>           raise ValueError("content is required and cannot be blank")
E           ValueError: content is required and cannot be blank

models\snippet.py:118: ValueError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati4\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati4\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_creation_validati4\test_db.sqlite3
_____________ test_snippet_name_uniqueness[Unique1-Unique2-True] ______________

sample_category = 1, name1 = 'Unique1', name2 = 'Unique2', should_succeed = True

    @pytest.mark.parametrize("name1,name2,should_succeed", [
        ("Unique1", "Unique2", True),
        ("DupName", "DupName", False),
    ])
    def test_snippet_name_uniqueness(sample_category, name1, name2, should_succeed):
        s1 = Snippet(category_id=sample_category, snippet_name=name1, content="abc")
>       assert s1.save() is True

tests\core\test_snippet_backend.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <models.snippet.Snippet object at 0x0000023D9F395A30>

    def save(self) -> bool:
        """Save the snippet to the database."""
        # Validate all business rules
        self.validate_snippet(self.snippet_name, self.content)
        # Uniqueness check within category
        db = self.db
        query = (
            "SELECT snippet_id FROM text_snippets WHERE category_id = ? AND snippet_name = ?"
        )
        params = (self.category_id, self.snippet_name)
        results = db.execute_query(query, params)
        print(f"[DEBUG] Uniqueness check for category_id={self.category_id}, snippet_name='{self.snippet_name}': results={results}")
        # If creating, any result is a conflict. If updating, only conflict if not self.
        if self.snippet_id is None:
            if results:
                print(f"[DEBUG] Duplicate found when creating: {results}")
                raise ValueError("snippet_name must be unique within category")
        else:
            for row in results:
                if row['snippet_id'] != self.snippet_id:
                    print(f"[DEBUG] Duplicate found when updating: {row}")
                    raise ValueError("snippet_name must be unique within category")
        if self.snippet_id is None:
            # New snippet
            # First, insert the snippet metadata
            query1 = """
                INSERT INTO text_snippets (category_id, snippet_name)
                VALUES (?, ?)
            """
    
            snippet_id = self.db.execute_insert(query1, (self.category_id, self.snippet_name))
            if snippet_id <= 0:
                return False
    
            self.snippet_id = snippet_id
    
            # Now, handle the content by splitting it into parts
            max_part_size = 8000  # SQLite has limits on text size
            content_parts = []
    
            for i in range(0, len(self.content), max_part_size):
                part_content = self.content[i:i+max_part_size]
                part_number = i // max_part_size
                content_parts.append((self.snippet_id, part_number, part_content))
    
            # Insert all parts
            conn = self.db.get_connection()
            cursor = conn.cursor()
            for part in content_parts:
                cursor.execute(
                    "INSERT INTO snippet_parts (snippet_id, part_number, content) VALUES (?, ?, ?)",
                    part
                )
            conn.commit()
            conn.close()
            conn = self.db.get_connection()
            cursor = conn.cursor()
>           cursor.execute(
                "UPDATE text_snippets SET snippet_name = ?, created_at = ?, category_id = ? WHERE snippet_id = ?",
                (self.snippet_name, self.created_at, self.category_id, self.snippet_id)
            )
E           sqlite3.OperationalError: no such column: created_at

models\snippet.py:177: OperationalError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_U0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_U0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_U0\test_db.sqlite3
---------------------------- Captured stdout call -----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_U0\test_db.sqlite3
[DEBUG] Uniqueness check for category_id=1, snippet_name='Unique1': results=[]
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_U0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_U0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_U0\test_db.sqlite3
_____________ test_snippet_name_uniqueness[DupName-DupName-False] _____________

sample_category = 1, name1 = 'DupName', name2 = 'DupName'
should_succeed = False

    @pytest.mark.parametrize("name1,name2,should_succeed", [
        ("Unique1", "Unique2", True),
        ("DupName", "DupName", False),
    ])
    def test_snippet_name_uniqueness(sample_category, name1, name2, should_succeed):
        s1 = Snippet(category_id=sample_category, snippet_name=name1, content="abc")
>       assert s1.save() is True

tests\core\test_snippet_backend.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <models.snippet.Snippet object at 0x0000023D9F4EA470>

    def save(self) -> bool:
        """Save the snippet to the database."""
        # Validate all business rules
        self.validate_snippet(self.snippet_name, self.content)
        # Uniqueness check within category
        db = self.db
        query = (
            "SELECT snippet_id FROM text_snippets WHERE category_id = ? AND snippet_name = ?"
        )
        params = (self.category_id, self.snippet_name)
        results = db.execute_query(query, params)
        print(f"[DEBUG] Uniqueness check for category_id={self.category_id}, snippet_name='{self.snippet_name}': results={results}")
        # If creating, any result is a conflict. If updating, only conflict if not self.
        if self.snippet_id is None:
            if results:
                print(f"[DEBUG] Duplicate found when creating: {results}")
                raise ValueError("snippet_name must be unique within category")
        else:
            for row in results:
                if row['snippet_id'] != self.snippet_id:
                    print(f"[DEBUG] Duplicate found when updating: {row}")
                    raise ValueError("snippet_name must be unique within category")
        if self.snippet_id is None:
            # New snippet
            # First, insert the snippet metadata
            query1 = """
                INSERT INTO text_snippets (category_id, snippet_name)
                VALUES (?, ?)
            """
    
            snippet_id = self.db.execute_insert(query1, (self.category_id, self.snippet_name))
            if snippet_id <= 0:
                return False
    
            self.snippet_id = snippet_id
    
            # Now, handle the content by splitting it into parts
            max_part_size = 8000  # SQLite has limits on text size
            content_parts = []
    
            for i in range(0, len(self.content), max_part_size):
                part_content = self.content[i:i+max_part_size]
                part_number = i // max_part_size
                content_parts.append((self.snippet_id, part_number, part_content))
    
            # Insert all parts
            conn = self.db.get_connection()
            cursor = conn.cursor()
            for part in content_parts:
                cursor.execute(
                    "INSERT INTO snippet_parts (snippet_id, part_number, content) VALUES (?, ?, ?)",
                    part
                )
            conn.commit()
            conn.close()
            conn = self.db.get_connection()
            cursor = conn.cursor()
>           cursor.execute(
                "UPDATE text_snippets SET snippet_name = ?, created_at = ?, category_id = ? WHERE snippet_id = ?",
                (self.snippet_name, self.created_at, self.category_id, self.snippet_id)
            )
E           sqlite3.OperationalError: no such column: created_at

models\snippet.py:177: OperationalError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_D0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_D0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_D0\test_db.sqlite3
---------------------------- Captured stdout call -----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_D0\test_db.sqlite3
[DEBUG] Uniqueness check for category_id=1, snippet_name='DupName': results=[]
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_D0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_D0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_name_uniqueness_D0\test_db.sqlite3
____________________________ test_snippet_deletion ____________________________

sample_category = 1

    def test_snippet_deletion(sample_category):
        s = Snippet(category_id=sample_category, snippet_name="ToDelete", content="abc")
>       s.save()

tests\core\test_snippet_backend.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <models.snippet.Snippet object at 0x0000023D9F4EB020>

    def save(self) -> bool:
        """Save the snippet to the database."""
        # Validate all business rules
        self.validate_snippet(self.snippet_name, self.content)
        # Uniqueness check within category
        db = self.db
        query = (
            "SELECT snippet_id FROM text_snippets WHERE category_id = ? AND snippet_name = ?"
        )
        params = (self.category_id, self.snippet_name)
        results = db.execute_query(query, params)
        print(f"[DEBUG] Uniqueness check for category_id={self.category_id}, snippet_name='{self.snippet_name}': results={results}")
        # If creating, any result is a conflict. If updating, only conflict if not self.
        if self.snippet_id is None:
            if results:
                print(f"[DEBUG] Duplicate found when creating: {results}")
                raise ValueError("snippet_name must be unique within category")
        else:
            for row in results:
                if row['snippet_id'] != self.snippet_id:
                    print(f"[DEBUG] Duplicate found when updating: {row}")
                    raise ValueError("snippet_name must be unique within category")
        if self.snippet_id is None:
            # New snippet
            # First, insert the snippet metadata
            query1 = """
                INSERT INTO text_snippets (category_id, snippet_name)
                VALUES (?, ?)
            """
    
            snippet_id = self.db.execute_insert(query1, (self.category_id, self.snippet_name))
            if snippet_id <= 0:
                return False
    
            self.snippet_id = snippet_id
    
            # Now, handle the content by splitting it into parts
            max_part_size = 8000  # SQLite has limits on text size
            content_parts = []
    
            for i in range(0, len(self.content), max_part_size):
                part_content = self.content[i:i+max_part_size]
                part_number = i // max_part_size
                content_parts.append((self.snippet_id, part_number, part_content))
    
            # Insert all parts
            conn = self.db.get_connection()
            cursor = conn.cursor()
            for part in content_parts:
                cursor.execute(
                    "INSERT INTO snippet_parts (snippet_id, part_number, content) VALUES (?, ?, ?)",
                    part
                )
            conn.commit()
            conn.close()
            conn = self.db.get_connection()
            cursor = conn.cursor()
>           cursor.execute(
                "UPDATE text_snippets SET snippet_name = ?, created_at = ?, category_id = ? WHERE snippet_id = ?",
                (self.snippet_name, self.created_at, self.category_id, self.snippet_id)
            )
E           sqlite3.OperationalError: no such column: created_at

models\snippet.py:177: OperationalError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_deletion0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_deletion0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_deletion0\test_db.sqlite3
---------------------------- Captured stdout call -----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_deletion0\test_db.sqlite3
[DEBUG] Uniqueness check for category_id=1, snippet_name='ToDelete': results=[]
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_deletion0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_deletion0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_deletion0\test_db.sqlite3
_____________________________ test_snippet_update _____________________________

sample_category = 1

    def test_snippet_update(sample_category):
        s = Snippet(category_id=sample_category, snippet_name="ToUpdate", content="abc")
>       s.save()

tests\core\test_snippet_backend.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <models.snippet.Snippet object at 0x0000023D9F51C750>

    def save(self) -> bool:
        """Save the snippet to the database."""
        # Validate all business rules
        self.validate_snippet(self.snippet_name, self.content)
        # Uniqueness check within category
        db = self.db
        query = (
            "SELECT snippet_id FROM text_snippets WHERE category_id = ? AND snippet_name = ?"
        )
        params = (self.category_id, self.snippet_name)
        results = db.execute_query(query, params)
        print(f"[DEBUG] Uniqueness check for category_id={self.category_id}, snippet_name='{self.snippet_name}': results={results}")
        # If creating, any result is a conflict. If updating, only conflict if not self.
        if self.snippet_id is None:
            if results:
                print(f"[DEBUG] Duplicate found when creating: {results}")
                raise ValueError("snippet_name must be unique within category")
        else:
            for row in results:
                if row['snippet_id'] != self.snippet_id:
                    print(f"[DEBUG] Duplicate found when updating: {row}")
                    raise ValueError("snippet_name must be unique within category")
        if self.snippet_id is None:
            # New snippet
            # First, insert the snippet metadata
            query1 = """
                INSERT INTO text_snippets (category_id, snippet_name)
                VALUES (?, ?)
            """
    
            snippet_id = self.db.execute_insert(query1, (self.category_id, self.snippet_name))
            if snippet_id <= 0:
                return False
    
            self.snippet_id = snippet_id
    
            # Now, handle the content by splitting it into parts
            max_part_size = 8000  # SQLite has limits on text size
            content_parts = []
    
            for i in range(0, len(self.content), max_part_size):
                part_content = self.content[i:i+max_part_size]
                part_number = i // max_part_size
                content_parts.append((self.snippet_id, part_number, part_content))
    
            # Insert all parts
            conn = self.db.get_connection()
            cursor = conn.cursor()
            for part in content_parts:
                cursor.execute(
                    "INSERT INTO snippet_parts (snippet_id, part_number, content) VALUES (?, ?, ?)",
                    part
                )
            conn.commit()
            conn.close()
            conn = self.db.get_connection()
            cursor = conn.cursor()
>           cursor.execute(
                "UPDATE text_snippets SET snippet_name = ?, created_at = ?, category_id = ? WHERE snippet_id = ?",
                (self.snippet_name, self.created_at, self.category_id, self.snippet_id)
            )
E           sqlite3.OperationalError: no such column: created_at

models\snippet.py:177: OperationalError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_update0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_update0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_update0\test_db.sqlite3
---------------------------- Captured stdout call -----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_update0\test_db.sqlite3
[DEBUG] Uniqueness check for category_id=1, snippet_name='ToUpdate': results=[]
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_update0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_update0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_update0\test_db.sqlite3
_________________________ test_snippet_sql_injection __________________________

sample_category = 1

    def test_snippet_sql_injection(sample_category):
        inj = "Robert'); DROP TABLE text_snippets;--"
>       s = Snippet(category_id=sample_category, snippet_name=inj, content="abc")

tests\core\test_snippet_backend.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
models\snippet.py:33: in __init__
    self.validate_snippet(snippet_name, content)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

snippet_name = "Robert'); DROP TABLE text_snippets;--", content = 'abc'

    @staticmethod
    def validate_snippet(snippet_name: str, content: str) -> None:
        """
        Validate snippet_name and content for all business rules.
        Raise ValueError for any violation.
        """
        # Non-blank
        if not snippet_name:
            raise ValueError("snippet_name is required and cannot be blank")
        # ASCII-only
        if not all(ord(c) < 128 for c in snippet_name):
            raise ValueError("snippet_name must be ASCII-only")
        # Length restriction
        if len(snippet_name) > 128:
            raise ValueError("snippet_name must be 128 characters or less")
        # SQL injection / forbidden patterns
        import re
        forbidden_chars = [";", "'", "--", "/*", "*/"]
        forbidden_keywords = ["DROP", "SELECT", "INSERT", "DELETE", "UPDATE", "ALTER"]
        lowered = snippet_name.lower()
        # Special characters: block anywhere
        for char in forbidden_chars:
            if char in snippet_name:
>               raise ValueError("snippet_name contains forbidden or dangerous characters/patterns")
E               ValueError: snippet_name contains forbidden or dangerous characters/patterns

models\snippet.py:111: ValueError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_sql_injection0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_sql_injection0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_sql_injection0\test_db.sqlite3
__________________________ test_snippet_long_content __________________________

sample_category = 1

    def test_snippet_long_content(sample_category):
        long_content = "x" * 20000
        s = Snippet(category_id=sample_category, snippet_name="LongContent", content=long_content)
>       assert s.save() is True

tests\core\test_snippet_backend.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <models.snippet.Snippet object at 0x0000023D9F511400>

    def save(self) -> bool:
        """Save the snippet to the database."""
        # Validate all business rules
        self.validate_snippet(self.snippet_name, self.content)
        # Uniqueness check within category
        db = self.db
        query = (
            "SELECT snippet_id FROM text_snippets WHERE category_id = ? AND snippet_name = ?"
        )
        params = (self.category_id, self.snippet_name)
        results = db.execute_query(query, params)
        print(f"[DEBUG] Uniqueness check for category_id={self.category_id}, snippet_name='{self.snippet_name}': results={results}")
        # If creating, any result is a conflict. If updating, only conflict if not self.
        if self.snippet_id is None:
            if results:
                print(f"[DEBUG] Duplicate found when creating: {results}")
                raise ValueError("snippet_name must be unique within category")
        else:
            for row in results:
                if row['snippet_id'] != self.snippet_id:
                    print(f"[DEBUG] Duplicate found when updating: {row}")
                    raise ValueError("snippet_name must be unique within category")
        if self.snippet_id is None:
            # New snippet
            # First, insert the snippet metadata
            query1 = """
                INSERT INTO text_snippets (category_id, snippet_name)
                VALUES (?, ?)
            """
    
            snippet_id = self.db.execute_insert(query1, (self.category_id, self.snippet_name))
            if snippet_id <= 0:
                return False
    
            self.snippet_id = snippet_id
    
            # Now, handle the content by splitting it into parts
            max_part_size = 8000  # SQLite has limits on text size
            content_parts = []
    
            for i in range(0, len(self.content), max_part_size):
                part_content = self.content[i:i+max_part_size]
                part_number = i // max_part_size
                content_parts.append((self.snippet_id, part_number, part_content))
    
            # Insert all parts
            conn = self.db.get_connection()
            cursor = conn.cursor()
            for part in content_parts:
                cursor.execute(
                    "INSERT INTO snippet_parts (snippet_id, part_number, content) VALUES (?, ?, ?)",
                    part
                )
            conn.commit()
            conn.close()
            conn = self.db.get_connection()
            cursor = conn.cursor()
>           cursor.execute(
                "UPDATE text_snippets SET snippet_name = ?, created_at = ?, category_id = ? WHERE snippet_id = ?",
                (self.snippet_name, self.created_at, self.category_id, self.snippet_id)
            )
E           sqlite3.OperationalError: no such column: created_at

models\snippet.py:177: OperationalError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_long_content0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_long_content0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_long_content0\test_db.sqlite3
---------------------------- Captured stdout call -----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_long_content0\test_db.sqlite3
[DEBUG] Uniqueness check for category_id=1, snippet_name='LongContent': results=[]
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_long_content0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_long_content0\test_db.sqlite3
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-43\test_snippet_long_content0\test_db.sqlite3
=========================== short test summary info ===========================
FAILED tests/core/test_snippet_backend.py::test_snippet_creation_validation[Alpha-Some content-True] - sqlite3.OperationalError: no such column: created_at
FAILED tests/core/test_snippet_backend.py::test_snippet_creation_validation[-Some content-False] - ValueError: snippet_name is required and cannot be blank
FAILED tests/core/test_snippet_backend.py::test_snippet_creation_validation[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-Content-False] - ValueError: snippet_name must be 128 characters or less
FAILED tests/core/test_snippet_backend.py::test_snippet_creation_validation[NonAscii\xe9-Content-False] - ValueError: snippet_name must be ASCII-only
FAILED tests/core/test_snippet_backend.py::test_snippet_creation_validation[Alpha--False] - ValueError: content is required and cannot be blank
FAILED tests/core/test_snippet_backend.py::test_snippet_name_uniqueness[Unique1-Unique2-True] - sqlite3.OperationalError: no such column: created_at
FAILED tests/core/test_snippet_backend.py::test_snippet_name_uniqueness[DupName-DupName-False] - sqlite3.OperationalError: no such column: created_at
FAILED tests/core/test_snippet_backend.py::test_snippet_deletion - sqlite3.OperationalError: no such column: created_at
FAILED tests/core/test_snippet_backend.py::test_snippet_update - sqlite3.OperationalError: no such column: created_at
FAILED tests/core/test_snippet_backend.py::test_snippet_sql_injection - ValueError: snippet_name contains forbidden or dangerous characters/patterns
FAILED tests/core/test_snippet_backend.py::test_snippet_long_content - sqlite3.OperationalError: no such column: created_at
============================= 11 failed in 0.92s ==============================
