"""
Keyboard dialog for adding/editing keyboards.
"""

from typing import Optional

from PySide6.QtCore import Qt
from PySide6.QtWidgets import (
    QDialog,
    QDialogButtonBox,
    QFormLayout,
    QLineEdit,
    QMessageBox,
    QSpinBox,
    QVBoxLayout,
    QWidget,
)

from models.keyboard import Keyboard


class KeyboardDialog(QDialog):
    """
    Dialog for adding or editing a keyboard.
    """

    def __init__(
        self,
        user_id: str,
        keyboard: Optional[Keyboard] = None,
        parent: Optional[QWidget] = None,
    ) -> None:
        """
        Initialize the keyboard dialog.

        Args:
            user_id: ID of the user this keyboard belongs to.
            keyboard: Optional keyboard to edit. If None, create a new keyboard.
            parent: Parent widget.
        """
        super().__init__(parent)
        self.user_id = user_id
        self.keyboard = keyboard
        self.setWindowTitle("Edit Keyboard" if keyboard else "Add Keyboard")
        self.setMinimumWidth(400)
        self.setup_ui()

    def setup_ui(self) -> None:
        """Set up the user interface."""
        layout = QVBoxLayout(self)

        # Form layout for keyboard details
        form_layout = QFormLayout()

        # Keyboard name field
        self.name_edit = QLineEdit()
        self.name_edit.setPlaceholderText("Enter keyboard name")
        form_layout.addRow("Keyboard Name:", self.name_edit)

        # Target ms per keystroke field
        self.target_ms_spinbox = QSpinBox()
        self.target_ms_spinbox.setMinimum(50)  # Reasonable minimum (very fast)
        self.target_ms_spinbox.setMaximum(5000)  # Reasonable maximum (very slow)
        self.target_ms_spinbox.setValue(600)  # Default value
        self.target_ms_spinbox.setSuffix(" ms")  # Add ms suffix
        self.target_ms_spinbox.setAlignment(Qt.AlignmentFlag.AlignRight)
        self.target_ms_spinbox.setToolTip("Target milliseconds per keystroke (speed goal)")
        form_layout.addRow("Target Speed:", self.target_ms_spinbox)

        # Populate fields if editing
        if self.keyboard:
            self.name_edit.setText(self.keyboard.keyboard_name or "")
            self.target_ms_spinbox.setValue(self.keyboard.target_ms_per_keystroke)

        layout.addLayout(form_layout)

        # Dialog buttons
        self.button_box = QDialogButtonBox(
            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel
        )
        self.button_box.accepted.connect(self.validate_and_accept)
        self.button_box.rejected.connect(self.reject)
        layout.addWidget(self.button_box)

    def validate_and_accept(self) -> None:
        """Validate input and accept the dialog if valid."""
        name = self.name_edit.text().strip()
        target_ms = self.target_ms_spinbox.value()

        if not name:
            QMessageBox.warning(self, "Validation Error", "Keyboard name is required.")
            self.name_edit.setFocus()
            return

        # Validate target ms value
        if target_ms < 50 or target_ms > 5000:
            QMessageBox.warning(
                self, "Validation Error", "Target speed must be between 50 and 5000 milliseconds."
            )
            self.target_ms_spinbox.setFocus()
            return

        # Create or update keyboard object
        if self.keyboard:
            self.keyboard.keyboard_name = name
            self.keyboard.target_ms_per_keystroke = target_ms
        else:
            self.keyboard = Keyboard(
                keyboard_id="",  # Will be generated by the manager
                user_id=self.user_id,
                keyboard_name=name,
                target_ms_per_keystroke=target_ms,
            )

        self.accept()

    def get_keyboard(self) -> Keyboard:
        """
        Get the keyboard object with updated values.

        Returns:
            The updated or new keyboard object.
        """
        return self.keyboard
