============================= test session starts =============================
platform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0 -- d:\OneDrive\Documents\SeanDev\AITypingTrainer\.venv\Scripts\python.exe
cachedir: .pytest_cache
PyQt5 5.15.11 -- Qt runtime 5.15.2 -- Qt compiled 5.15.2
rootdir: D:\OneDrive\Documents\SeanDev\AITypingTrainer
plugins: mock-3.14.0, qt-4.4.0
collecting ... collected 11 items

tests/api/test_snippet_api.py::test_api_snippet_create_validation[ApiAlpha-Some content-True] FAILED [  9%]
tests/api/test_snippet_api.py::test_api_snippet_create_validation[-Some content-False] ERROR [ 18%]
tests/api/test_snippet_api.py::test_api_snippet_create_validation[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-Content-False] ERROR [ 27%]
tests/api/test_snippet_api.py::test_api_snippet_create_validation[NonAscii\xe9-Content-False] ERROR [ 36%]
tests/api/test_snippet_api.py::test_api_snippet_create_validation[ApiAlpha--False] ERROR [ 45%]
tests/api/test_snippet_api.py::test_api_snippet_name_uniqueness[ApiUnique1-ApiUnique2-True] ERROR [ 54%]
tests/api/test_snippet_api.py::test_api_snippet_name_uniqueness[ApiDup-ApiDup-False] ERROR [ 63%]
tests/api/test_snippet_api.py::test_api_snippet_get_and_delete ERROR     [ 72%]
tests/api/test_snippet_api.py::test_api_snippet_update ERROR             [ 81%]
tests/api/test_snippet_api.py::test_api_snippet_sql_injection ERROR      [ 90%]
tests/api/test_snippet_api.py::test_api_snippet_long_content ERROR       [100%]

=================================== ERRORS ====================================
__ ERROR at setup of test_api_snippet_create_validation[-Some content-False] __

client = <FlaskClient <Flask 'tests.api.test_snippet_api'>>

    @pytest.fixture
    def category_id(client):
        # Create a category for snippet tests
        resp = client.post("/api/categories", data={"name": "APIcat"})
>       assert resp.status_code == 200
E       assert 400 == 200
E        +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code

tests\api\test_snippet_api.py:32: AssertionError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-49\test_api_snippet_create_valida1\test_api_db.sqlite3
[DatabaseManager] Connecting to DB file: typing_data.db
_ ERROR at setup of test_api_snippet_create_validation[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-Content-False] _

client = <FlaskClient <Flask 'tests.api.test_snippet_api'>>

    @pytest.fixture
    def category_id(client):
        # Create a category for snippet tests
        resp = client.post("/api/categories", data={"name": "APIcat"})
>       assert resp.status_code == 200
E       assert 400 == 200
E        +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code

tests\api\test_snippet_api.py:32: AssertionError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-49\test_api_snippet_create_valida2\test_api_db.sqlite3
[DatabaseManager] Connecting to DB file: typing_data.db
_ ERROR at setup of test_api_snippet_create_validation[NonAscii\xe9-Content-False] _

client = <FlaskClient <Flask 'tests.api.test_snippet_api'>>

    @pytest.fixture
    def category_id(client):
        # Create a category for snippet tests
        resp = client.post("/api/categories", data={"name": "APIcat"})
>       assert resp.status_code == 200
E       assert 400 == 200
E        +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code

tests\api\test_snippet_api.py:32: AssertionError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-49\test_api_snippet_create_valida3\test_api_db.sqlite3
[DatabaseManager] Connecting to DB file: typing_data.db
____ ERROR at setup of test_api_snippet_create_validation[ApiAlpha--False] ____

client = <FlaskClient <Flask 'tests.api.test_snippet_api'>>

    @pytest.fixture
    def category_id(client):
        # Create a category for snippet tests
        resp = client.post("/api/categories", data={"name": "APIcat"})
>       assert resp.status_code == 200
E       assert 400 == 200
E        +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code

tests\api\test_snippet_api.py:32: AssertionError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-49\test_api_snippet_create_valida4\test_api_db.sqlite3
[DatabaseManager] Connecting to DB file: typing_data.db
_ ERROR at setup of test_api_snippet_name_uniqueness[ApiUnique1-ApiUnique2-True] _

client = <FlaskClient <Flask 'tests.api.test_snippet_api'>>

    @pytest.fixture
    def category_id(client):
        # Create a category for snippet tests
        resp = client.post("/api/categories", data={"name": "APIcat"})
>       assert resp.status_code == 200
E       assert 400 == 200
E        +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code

tests\api\test_snippet_api.py:32: AssertionError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-49\test_api_snippet_name_uniquene0\test_api_db.sqlite3
[DatabaseManager] Connecting to DB file: typing_data.db
___ ERROR at setup of test_api_snippet_name_uniqueness[ApiDup-ApiDup-False] ___

client = <FlaskClient <Flask 'tests.api.test_snippet_api'>>

    @pytest.fixture
    def category_id(client):
        # Create a category for snippet tests
        resp = client.post("/api/categories", data={"name": "APIcat"})
>       assert resp.status_code == 200
E       assert 400 == 200
E        +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code

tests\api\test_snippet_api.py:32: AssertionError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-49\test_api_snippet_name_uniquene1\test_api_db.sqlite3
[DatabaseManager] Connecting to DB file: typing_data.db
______________ ERROR at setup of test_api_snippet_get_and_delete ______________

client = <FlaskClient <Flask 'tests.api.test_snippet_api'>>

    @pytest.fixture
    def category_id(client):
        # Create a category for snippet tests
        resp = client.post("/api/categories", data={"name": "APIcat"})
>       assert resp.status_code == 200
E       assert 400 == 200
E        +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code

tests\api\test_snippet_api.py:32: AssertionError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-49\test_api_snippet_get_and_delet0\test_api_db.sqlite3
[DatabaseManager] Connecting to DB file: typing_data.db
__________________ ERROR at setup of test_api_snippet_update __________________

client = <FlaskClient <Flask 'tests.api.test_snippet_api'>>

    @pytest.fixture
    def category_id(client):
        # Create a category for snippet tests
        resp = client.post("/api/categories", data={"name": "APIcat"})
>       assert resp.status_code == 200
E       assert 400 == 200
E        +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code

tests\api\test_snippet_api.py:32: AssertionError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-49\test_api_snippet_update0\test_api_db.sqlite3
[DatabaseManager] Connecting to DB file: typing_data.db
______________ ERROR at setup of test_api_snippet_sql_injection _______________

client = <FlaskClient <Flask 'tests.api.test_snippet_api'>>

    @pytest.fixture
    def category_id(client):
        # Create a category for snippet tests
        resp = client.post("/api/categories", data={"name": "APIcat"})
>       assert resp.status_code == 200
E       assert 400 == 200
E        +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code

tests\api\test_snippet_api.py:32: AssertionError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-49\test_api_snippet_sql_injection0\test_api_db.sqlite3
[DatabaseManager] Connecting to DB file: typing_data.db
_______________ ERROR at setup of test_api_snippet_long_content _______________

client = <FlaskClient <Flask 'tests.api.test_snippet_api'>>

    @pytest.fixture
    def category_id(client):
        # Create a category for snippet tests
        resp = client.post("/api/categories", data={"name": "APIcat"})
>       assert resp.status_code == 200
E       assert 400 == 200
E        +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code

tests\api\test_snippet_api.py:32: AssertionError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-49\test_api_snippet_long_content0\test_api_db.sqlite3
[DatabaseManager] Connecting to DB file: typing_data.db
================================== FAILURES ===================================
_______ test_api_snippet_create_validation[ApiAlpha-Some content-True] ________

client = <FlaskClient <Flask 'tests.api.test_snippet_api'>>, category_id = 16
name = 'ApiAlpha', content = 'Some content', expect_success = True

    @pytest.mark.parametrize("name,content,expect_success", [
        ("ApiAlpha", "Some content", True),
        ("", "Some content", False),
        ("A"*129, "Content", False),
        ("NonAsciiΘ", "Content", False),
        ("ApiAlpha", "", False),
    ])
    def test_api_snippet_create_validation(client, category_id, name, content, expect_success):
        resp = client.post("/api/snippets", json={"category_id": category_id, "snippet_name": name, "content": content})
        if expect_success:
>           assert resp.status_code == 200
E           assert 500 == 200
E            +  where 500 = <WrapperTestResponse streamed [500 INTERNAL SERVER ERROR]>.status_code

tests\api\test_snippet_api.py:46: AssertionError
---------------------------- Captured stdout setup ----------------------------
[DatabaseManager] Connecting to DB file: C:\Users\seanb\AppData\Local\Temp\pytest-of-seanb\pytest-49\test_api_snippet_create_valida0\test_api_db.sqlite3
[DatabaseManager] Connecting to DB file: typing_data.db
[DatabaseManager] Connecting to DB file: typing_data.db
=========================== short test summary info ===========================
FAILED tests/api/test_snippet_api.py::test_api_snippet_create_validation[ApiAlpha-Some content-True] - assert 500 == 200
 +  where 500 = <WrapperTestResponse streamed [500 INTERNAL SERVER ERROR]>.status_code
ERROR tests/api/test_snippet_api.py::test_api_snippet_create_validation[-Some content-False] - assert 400 == 200
 +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code
ERROR tests/api/test_snippet_api.py::test_api_snippet_create_validation[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-Content-False] - assert 400 == 200
 +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code
ERROR tests/api/test_snippet_api.py::test_api_snippet_create_validation[NonAscii\xe9-Content-False] - assert 400 == 200
 +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code
ERROR tests/api/test_snippet_api.py::test_api_snippet_create_validation[ApiAlpha--False] - assert 400 == 200
 +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code
ERROR tests/api/test_snippet_api.py::test_api_snippet_name_uniqueness[ApiUnique1-ApiUnique2-True] - assert 400 == 200
 +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code
ERROR tests/api/test_snippet_api.py::test_api_snippet_name_uniqueness[ApiDup-ApiDup-False] - assert 400 == 200
 +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code
ERROR tests/api/test_snippet_api.py::test_api_snippet_get_and_delete - assert 400 == 200
 +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code
ERROR tests/api/test_snippet_api.py::test_api_snippet_update - assert 400 == 200
 +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code
ERROR tests/api/test_snippet_api.py::test_api_snippet_sql_injection - assert 400 == 200
 +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code
ERROR tests/api/test_snippet_api.py::test_api_snippet_long_content - assert 400 == 200
 +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code
======================== 1 failed, 10 errors in 1.13s =========================
