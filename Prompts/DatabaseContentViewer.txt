on the Database Content Viewer page - can you add a button that says "delete all rows in this table" which deletes rows ONLY in the table that is currently being viewed?

Could you also add a button saying "Backup this table" which exports the content of this table to a file under the project folder structure, in a folder called "DB_Backup".    The file should be named after the table name, with today's date appended to the end of the table, and should be backed up in a format which is tolerant of various different character types in the data (in other words CSV won't work) and it also needs to include table field names so that this table can be restored later

Finally - can you add a button saying "restore from backup" which will bring up a file picker to select the backup.     The contents of that file are then loaded into the table which is selected.     The existing content of the table should first be removed and the content of the file inserted, replacing the current table content



 Can you please generate a test class using pytest that tests these 3 functionalities (backup all rows, delete all rows, restore rows).     I don't want these tests to alter the main production database so these tests will need test fixtures to create a new test DB in order to do this.

Each of these tests have to be independant of each other and cannot rely on the other one.     In order to make this testable you may need to refactor the code to cleanup the interface and classes.

I would expect that you are testing multiple different error scenarios too:
- Trying to delete rows from a table that does not exist should throw an error
- Trying to backup all rows from a table which has no rows should throw an error
- If the table is not empty after deleting all rows, then this is a failing test case
- please make sure that the backup and restore operations faithfully restore all character types that are commonly usined in coding like ' "[ ] { } ( ) < > etc by writing parameterised tests that explicitly check for these situations
- please use pytest's built-in fixtures to create a new test database for each test, and for any new folders and files for backups
- please avoid putting SQL statements directly into the tests in-case we change the underlying DB - this should be delegated to the database management classes
- To check for empty tables - this should be a standard method on your table operations class

Please then run all these tests and fix any errors that you find
