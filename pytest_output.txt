============================= test session starts =============================
platform win32 -- Python 3.13.2, pytest-8.4.1, pluggy-1.6.0 -- D:\SeanDevLocal\AITypingTrainer\.venv\Scripts\python.exe
cachedir: .pytest_cache
PySide6 6.9.1 -- Qt runtime 6.9.1 -- Qt compiled 6.9.1
rootdir: D:\SeanDevLocal\AITypingTrainer
configfile: pytest.ini
plugins: anyio-4.10.0, cov-6.2.1, mock-3.14.1, qt-4.5.0
collecting ... collected 14 items

tests/models/test_ngram_analytics_service.py::TestDecayingAverageCalculator::test_calculate_decaying_average_basic PASSED [  7%]
tests/models/test_ngram_analytics_service.py::TestDecayingAverageCalculator::test_calculate_decaying_average_single_value PASSED [ 14%]
tests/models/test_ngram_analytics_service.py::TestDecayingAverageCalculator::test_calculate_decaying_average_empty_values PASSED [ 21%]
tests/models/test_ngram_analytics_service.py::TestDecayingAverageCalculator::test_calculate_decaying_average_max_samples PASSED [ 28%]
tests/models/test_ngram_analytics_service.py::TestNGramAnalyticsService::test_init_with_valid_dependencies PASSED [ 35%]
tests/models/test_ngram_analytics_service.py::TestNGramAnalyticsService::test_init_with_none_dependencies PASSED [ 42%]
tests/models/test_ngram_analytics_service.py::TestNGramAnalyticsService::test_refresh_speed_summaries_basic PASSED [ 50%]
tests/models/test_ngram_analytics_service.py::TestNGramAnalyticsService::test_dual_insert_creates_records_in_both_tables FAILED [ 57%]
tests/models/test_ngram_analytics_service.py::TestNGramAnalyticsService::test_history_table_accumulates_all_records FAILED [ 64%]
tests/models/test_ngram_analytics_service.py::TestNGramAnalyticsService::test_get_ngram_history_retrieval FAILED [ 71%]
tests/models/test_ngram_analytics_service.py::TestNGramAnalyticsService::test_history_table_schema_compatibility FAILED [ 78%]
tests/models/test_ngram_analytics_service.py::TestNGramPerformanceData::test_valid_performance_data PASSED [ 85%]
tests/models/test_ngram_analytics_service.py::TestNGramPerformanceData::test_invalid_performance_data PASSED [ 92%]
tests/models/test_ngram_analytics_service.py::TestNGramHeatmapData::test_valid_heatmap_data PASSED [100%]

================================== FAILURES ===================================
__ TestNGramAnalyticsService.test_dual_insert_creates_records_in_both_tables __

self = <AITypingTrainer.tests.models.test_ngram_analytics_service.TestNGramAnalyticsService object at 0x0000029068385220>
temp_db = <db.database_manager.DatabaseManager object at 0x0000029068385350>
mock_sessions = [{'keyboard_id': 'keyboard_1', 'session_id': 'session_1', 'start_time': '2024-01-01 10:01:00', 'target_ms_per_keystrok...: 'keyboard_1', 'session_id': 'session_2', 'start_time': '2024-01-01 10:02:00', 'target_ms_per_keystroke': 170.0, ...}]
mock_ngram_data = [{'ms_per_keystroke': 100.0, 'ngram_size': 2, 'ngram_speed_id': 'ng_0', 'ngram_text': 'th', ...}, {'ms_per_keystroke':...ram_text': 'th', ...}, {'ms_per_keystroke': 107.5, 'ngram_size': 3, 'ngram_speed_id': 'ng_3', 'ngram_text': 'he', ...}]

    def test_dual_insert_creates_records_in_both_tables(
        self,
        temp_db: DatabaseManager,
        mock_sessions: List[MockSessionData],
        mock_ngram_data: List[MockNGramSpeedData],
    ) -> None:
        """Test objective: Verify dual-insert creates records in both current and history tables.
    
        Tests that when refresh_speed_summaries is called, records are created
        in both ngram_speed_summary_curr and ngram_speed_summary_hist tables.
        """
        ngram_manager = NGramManager(temp_db)
        service = NGramAnalyticsService(temp_db, ngram_manager)
    
        # Seed required FK rows
        user_id = "user_1"
        keyboard_id = "keyboard_1"
        # Seed required FK rows
        temp_db.execute(
            "INSERT INTO users (user_id, first_name, surname, email_address) VALUES (?, ?, ?, ?)",
            (user_id, "Test", "User", "user_1@example.com"),
        )
        temp_db.execute(
            (
                "INSERT INTO keyboards (keyboard_id, user_id, "
                "keyboard_name, target_ms_per_keystroke) VALUES (?, ?, ?, ?)"
            ),
            (keyboard_id, user_id, "Test Keyboard", 100),
        )
        temp_db.execute(
            "INSERT INTO categories (category_id, category_name) VALUES (?, ?)",
            ("cat_1", "Test Category"),
        )
        temp_db.execute(
            "INSERT INTO snippets (snippet_id, category_id, snippet_name) VALUES (?, ?, ?)",
            ("test_snippet_1", "cat_1", "Snippet 1"),
        )
    
        # Insert test session and keyboard data
        for session in mock_sessions:
            temp_db.execute(
                """INSERT INTO practice_sessions
                (session_id, user_id, keyboard_id, snippet_id, snippet_index_start, snippet_index_end,
                 content, start_time, end_time, actual_chars, errors, ms_per_keystroke)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                (
                    session["session_id"],
                    session["user_id"],
                    session["keyboard_id"],
                    "test_snippet_1",
                    0,
                    10,
                    "test content",
                    session["start_time"],
                    session["start_time"],
                    "test",
                    0,
                    session["target_ms_per_keystroke"],
                ),
            )
    
        for ngram_data in mock_ngram_data:
            temp_db.execute(
                """INSERT INTO session_ngram_speed
                (ngram_speed_id, session_id, ngram_size, ngram_text, ngram_time_ms, ms_per_keystroke)
                VALUES (?, ?, ?, ?, ?, ?)""",
                (
                    ngram_data["ngram_speed_id"],
                    ngram_data["session_id"],
                    ngram_data["ngram_size"],
                    ngram_data["ngram_text"],
                    ngram_data["ngram_time_ms"],
                    ngram_data["ms_per_keystroke"],
                ),
            )
    
        # keyboards pre-seeded above
    
        # Refresh speed summaries
        service.refresh_speed_summaries(user_id, keyboard_id)
    
        # Check record counts in both tables
        current_row = temp_db.fetchone("SELECT COUNT(*) AS cnt FROM ngram_speed_summary_curr")
        history_row = temp_db.fetchone("SELECT COUNT(*) AS cnt FROM ngram_speed_summary_hist")
        current_count = int(current_row["cnt"]) if current_row is not None else 0
        history_count = int(history_row["cnt"]) if history_row is not None else 0
    
        assert current_count > 0, "Current table should have records"
>       assert history_count > 0, "History table should have records"
E       AssertionError: History table should have records
E       assert 0 > 0

tests\models\test_ngram_analytics_service.py:246: AssertionError
---------------------------- Captured stdout call -----------------------------
Exception during query: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target. Rolling back transaction.
Exception during query: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target. Rolling back transaction.
---------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 892, in summarize_session_ngrams
    self.add_speed_summary_for_session(sid)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 1084, in add_speed_summary_for_session
    self.db.execute(
    ~~~~~~~~~~~~~~~^
        insert_hist_sql,
        ^^^^^^^^^^^^^^^^
        (user_id, keyboard_id, session_id, user_id, keyboard_id, keyboard_id),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 641, in execute
    self._translate_and_raise(e)
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 558, in _translate_and_raise
    raise ConstraintError(f"Constraint violation: {e}") from e
db.exceptions.ConstraintError: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 892, in summarize_session_ngrams
    self.add_speed_summary_for_session(sid)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 1084, in add_speed_summary_for_session
    self.db.execute(
    ~~~~~~~~~~~~~~~^
        insert_hist_sql,
        ^^^^^^^^^^^^^^^^
        (user_id, keyboard_id, session_id, user_id, keyboard_id, keyboard_id),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 641, in execute
    self._translate_and_raise(e)
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 558, in _translate_and_raise
    raise ConstraintError(f"Constraint violation: {e}") from e
db.exceptions.ConstraintError: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
------------------------------ Captured log call ------------------------------
ERROR    models.ngram_analytics_service:ngram_analytics_service.py:1093 Error in AddSpeedSummaryForSession for session session_1: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
WARNING  models.ngram_analytics_service:ngram_analytics_service.py:896 add_speed_summary_for_session failed for session_1
ERROR    models.ngram_analytics_service:ngram_analytics_service.py:1093 Error in AddSpeedSummaryForSession for session session_2: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
WARNING  models.ngram_analytics_service:ngram_analytics_service.py:896 add_speed_summary_for_session failed for session_2
____ TestNGramAnalyticsService.test_history_table_accumulates_all_records _____

self = <db.database_manager.DatabaseManager object at 0x00000290684F0830>
query = 'INSERT INTO practice_sessions \n            (session_id, user_id, keyboard_id, snippet_id, snippet_index_start, snipp...tart_time, end_time, actual_chars, errors, ms_per_keystroke) \n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
params = ('session_2', 'user_1', 'keyboard_1', 'test_snippet_2', 0, 10, ...)

    def execute(self, query: str, params: Tuple[object, ...] = ()) -> CursorProtocol:
        """Execute a SQL query with parameters and commit immediately.
    
        Args:
            query: SQL query string (parameterized)
            params: Query parameters
    
        Returns:
            Database cursor object
    
        Raises:
            DBConnectionError, TableNotFoundError, SchemaError, DatabaseError,
            ForeignKeyError, ConstraintError, IntegrityError, DatabaseTypeError
        """
        try:
            cursor: CursorProtocol = self._get_cursor()
    
            if self.is_postgres:
                query = self._qualify_schema_in_query(query)
                # Debug the final SQL being executed on Postgres
                try:
                    dbg_sql = query.replace("\n", " ").strip()
                    self._debug_message(f"Executing SQL (PG): {dbg_sql}; params={params}")
                except Exception:
                    pass
    
            # Execute the query
>           cursor.execute(query, params)
E           sqlite3.IntegrityError: UNIQUE constraint failed: practice_sessions.session_id

db\database_manager.py:626: IntegrityError

The above exception was the direct cause of the following exception:

self = <AITypingTrainer.tests.models.test_ngram_analytics_service.TestNGramAnalyticsService object at 0x00000290684F04D0>
temp_db = <db.database_manager.DatabaseManager object at 0x00000290684F0830>
mock_sessions = [{'keyboard_id': 'keyboard_1', 'session_id': 'session_1', 'start_time': '2024-01-01 10:01:00', 'target_ms_per_keystrok...: 'keyboard_1', 'session_id': 'session_2', 'start_time': '2024-01-01 10:02:00', 'target_ms_per_keystroke': 170.0, ...}]
mock_ngram_data = [{'ms_per_keystroke': 100.0, 'ngram_size': 2, 'ngram_speed_id': 'ng_0', 'ngram_text': 'th', ...}, {'ms_per_keystroke':...ram_text': 'th', ...}, {'ms_per_keystroke': 107.5, 'ngram_size': 3, 'ngram_speed_id': 'ng_3', 'ngram_text': 'he', ...}]

    def test_history_table_accumulates_all_records(
        self,
        temp_db: DatabaseManager,
        mock_sessions: List[MockSessionData],
        mock_ngram_data: List[MockNGramSpeedData],
    ) -> None:
        """Test objective: Verify history table contains all records over multiple refreshes.
    
        Tests that the history table accumulates all records from multiple
        refresh operations while current table only contains latest values.
        """
        ngram_manager = NGramManager(temp_db)
        service = NGramAnalyticsService(temp_db, ngram_manager)
    
        user_id = "user_1"
        keyboard_id = "keyboard_1"
    
        # Seed required FK rows for users, keyboards, categories, and snippets
        temp_db.execute(
            "INSERT INTO users (user_id, first_name, surname, email_address) VALUES (?, ?, ?, ?)",
            (user_id, "Test", "User", "user_1@example.com"),
        )
        temp_db.execute(
            (
                "INSERT INTO keyboards (keyboard_id, user_id, "
                "keyboard_name, target_ms_per_keystroke) VALUES (?, ?, ?, ?)"
            ),
            (keyboard_id, user_id, "Test Keyboard", 100),
        )
        temp_db.execute(
            "INSERT INTO categories (category_id, category_name) VALUES (?, ?)",
            ("cat_1", "Test Category"),
        )
        temp_db.execute(
            "INSERT INTO snippets (snippet_id, category_id, snippet_name) VALUES (?, ?, ?)",
            ("test_snippet_1", "cat_1", "Snippet 1"),
        )
    
        # Set up initial test data
        for session in mock_sessions:
            temp_db.execute(
                """INSERT INTO practice_sessions
                (session_id, user_id, keyboard_id, snippet_id, snippet_index_start, snippet_index_end,
                 content, start_time, end_time, actual_chars, errors, ms_per_keystroke)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                (
                    session["session_id"],
                    session["user_id"],
                    session["keyboard_id"],
                    "test_snippet_1",
                    0,
                    10,
                    "test content",
                    session["start_time"],
                    session["start_time"],
                    "test",
                    0,
                    session["target_ms_per_keystroke"],
                ),
            )
    
        for ngram_data in mock_ngram_data:
            temp_db.execute(
                """INSERT INTO session_ngram_speed
                (ngram_speed_id, session_id, ngram_size, ngram_text, ngram_time_ms, ms_per_keystroke)
                VALUES (?, ?, ?, ?, ?, ?)""",
                (
                    ngram_data["ngram_speed_id"],
                    ngram_data["session_id"],
                    ngram_data["ngram_size"],
                    ngram_data["ngram_text"],
                    ngram_data["ngram_time_ms"],
                    ngram_data["ms_per_keystroke"],
                ),
            )
    
        # keyboards pre-seeded above
    
        # First refresh
        service.refresh_speed_summaries(user_id, keyboard_id)
        history_row_1 = temp_db.fetchone("SELECT COUNT(*) AS cnt FROM ngram_speed_summary_hist")
        history_count_1 = int(history_row_1["cnt"]) if history_row_1 is not None else 0
    
        # Add more data and refresh again
        session_id_2 = "session_2"
        # Ensure referenced snippet exists before inserting practice session (for FKs)
        temp_db.execute(
            "INSERT INTO snippets (snippet_id, category_id, snippet_name) VALUES (?, ?, ?)",
            ("test_snippet_2", "cat_1", "Snippet 2"),
        )
>       temp_db.execute(
            """INSERT INTO practice_sessions
            (session_id, user_id, keyboard_id, snippet_id, snippet_index_start, snippet_index_end,
             content, start_time, end_time, actual_chars, errors, ms_per_keystroke)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (
                session_id_2,
                user_id,
                keyboard_id,
                "test_snippet_2",
                0,
                10,
                "test content 2",
                "2024-01-01 10:00:00",
                "2024-01-01 10:00:00",
                "test",
                0,
                150,
            ),
        )

tests\models\test_ngram_analytics_service.py:339: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
db\database_manager.py:641: in execute
    self._translate_and_raise(e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <db.database_manager.DatabaseManager object at 0x00000290684F0830>
e = IntegrityError('UNIQUE constraint failed: practice_sessions.session_id')

    def _translate_and_raise(self, e: Exception) -> NoReturn:
        """Translate backend-specific exceptions to our custom exceptions and raise.
    
        Always raises; does not return.
        """
        # SQLite mapping
        if isinstance(e, sqlite3.OperationalError):
            error_msg: str = str(e).lower()
            if "unable to open database" in error_msg:
                raise DBConnectionError(f"Failed to connect to database at {self.db_path}") from e
            if "no such table" in error_msg:
                raise TableNotFoundError(f"Table not found: {e}") from e
            if "no such column" in error_msg:
                raise SchemaError(f"Schema error: {e}") from e
            raise DatabaseError(f"Database operation failed: {e}") from e
        elif isinstance(e, sqlite3.IntegrityError):
            error_msg = str(e).lower()
            if "foreign key" in error_msg:
                raise ForeignKeyError(f"Foreign key constraint failed: {e}") from e
            elif "not null" in error_msg or "unique" in error_msg:
>               raise ConstraintError(f"Constraint violation: {e}") from e
E               db.exceptions.ConstraintError: Constraint violation: UNIQUE constraint failed: practice_sessions.session_id

db\database_manager.py:558: ConstraintError
---------------------------- Captured stdout call -----------------------------
Exception during query: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target. Rolling back transaction.
Exception during query: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target. Rolling back transaction.
Exception during query: UNIQUE constraint failed: practice_sessions.session_id. Rolling back transaction.
---------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 892, in summarize_session_ngrams
    self.add_speed_summary_for_session(sid)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 1084, in add_speed_summary_for_session
    self.db.execute(
    ~~~~~~~~~~~~~~~^
        insert_hist_sql,
        ^^^^^^^^^^^^^^^^
        (user_id, keyboard_id, session_id, user_id, keyboard_id, keyboard_id),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 641, in execute
    self._translate_and_raise(e)
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 558, in _translate_and_raise
    raise ConstraintError(f"Constraint violation: {e}") from e
db.exceptions.ConstraintError: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 892, in summarize_session_ngrams
    self.add_speed_summary_for_session(sid)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 1084, in add_speed_summary_for_session
    self.db.execute(
    ~~~~~~~~~~~~~~~^
        insert_hist_sql,
        ^^^^^^^^^^^^^^^^
        (user_id, keyboard_id, session_id, user_id, keyboard_id, keyboard_id),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 641, in execute
    self._translate_and_raise(e)
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 558, in _translate_and_raise
    raise ConstraintError(f"Constraint violation: {e}") from e
db.exceptions.ConstraintError: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: UNIQUE constraint failed: practice_sessions.session_id
------------------------------ Captured log call ------------------------------
ERROR    models.ngram_analytics_service:ngram_analytics_service.py:1093 Error in AddSpeedSummaryForSession for session session_1: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
WARNING  models.ngram_analytics_service:ngram_analytics_service.py:896 add_speed_summary_for_session failed for session_1
ERROR    models.ngram_analytics_service:ngram_analytics_service.py:1093 Error in AddSpeedSummaryForSession for session session_2: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
WARNING  models.ngram_analytics_service:ngram_analytics_service.py:896 add_speed_summary_for_session failed for session_2
_________ TestNGramAnalyticsService.test_get_ngram_history_retrieval __________

self = <AITypingTrainer.tests.models.test_ngram_analytics_service.TestNGramAnalyticsService object at 0x000002906728F570>
temp_db = <db.database_manager.DatabaseManager object at 0x00000290685D8160>
mock_sessions = [{'keyboard_id': 'keyboard_1', 'session_id': 'session_1', 'start_time': '2024-01-01 10:01:00', 'target_ms_per_keystrok...: 'keyboard_1', 'session_id': 'session_2', 'start_time': '2024-01-01 10:02:00', 'target_ms_per_keystroke': 170.0, ...}]
mock_ngram_data = [{'ms_per_keystroke': 100.0, 'ngram_size': 2, 'ngram_speed_id': 'ng_0', 'ngram_text': 'th', ...}, {'ms_per_keystroke':...ram_text': 'th', ...}, {'ms_per_keystroke': 107.5, 'ngram_size': 3, 'ngram_speed_id': 'ng_3', 'ngram_text': 'he', ...}]

    def test_get_ngram_history_retrieval(
        self,
        temp_db: DatabaseManager,
        mock_sessions: List[MockSessionData],
        mock_ngram_data: List[MockNGramSpeedData],
    ) -> None:
        """Test objective: Verify history retrieval functionality.
    
        Tests that historical data can be retrieved properly with correct
        timestamps and performance metrics.
        """
        ngram_manager = NGramManager(temp_db)
        service = NGramAnalyticsService(temp_db, ngram_manager)
    
        user_id = "user_1"
        keyboard_id = "keyboard_1"
    
        # Seed required FK rows for users, keyboards, categories, and snippets
        temp_db.execute(
            "INSERT INTO users (user_id, first_name, surname, email_address) VALUES (?, ?, ?, ?)",
            (user_id, "Test", "User", "user_1@example.com"),
        )
        temp_db.execute(
            (
                "INSERT INTO keyboards (keyboard_id, user_id, "
                "keyboard_name, target_ms_per_keystroke) VALUES (?, ?, ?, ?)"
            ),
            (keyboard_id, user_id, "Test Keyboard", 100),
        )
        temp_db.execute(
            "INSERT INTO categories (category_id, category_name) VALUES (?, ?)",
            ("cat_1", "Test Category"),
        )
        temp_db.execute(
            "INSERT INTO snippets (snippet_id, category_id, snippet_name) VALUES (?, ?, ?)",
            ("test_snippet_1", "cat_1", "Snippet 1"),
        )
    
        # Set up test data and refresh
        for session in mock_sessions:
            temp_db.execute(
                """INSERT INTO practice_sessions
                (session_id, user_id, keyboard_id, snippet_id, snippet_index_start, snippet_index_end,
                 content, start_time, end_time, actual_chars, errors, ms_per_keystroke)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                (
                    session["session_id"],
                    session["user_id"],
                    session["keyboard_id"],
                    "test_snippet_1",
                    0,
                    10,
                    "test content",
                    session["start_time"],
                    session["start_time"],
                    "test",
                    0,
                    session["target_ms_per_keystroke"],
                ),
            )
    
        for ngram_data in mock_ngram_data:
            temp_db.execute(
                """INSERT INTO session_ngram_speed
                (ngram_speed_id, session_id, ngram_size, ngram_text, ngram_time_ms, ms_per_keystroke)
                VALUES (?, ?, ?, ?, ?, ?)""",
                (
                    ngram_data["ngram_speed_id"],
                    ngram_data["session_id"],
                    ngram_data["ngram_size"],
                    ngram_data["ngram_text"],
                    ngram_data["ngram_time_ms"],
                    ngram_data["ms_per_keystroke"],
                ),
            )
    
        # keyboards pre-seeded above
    
        service.refresh_speed_summaries(user_id, keyboard_id)
    
        # Test the get_ngram_history method (to be implemented)
        history = service.get_ngram_history(user_id, keyboard_id, "th")
    
>       assert len(history) > 0, "Should return history records"
E       AssertionError: Should return history records
E       assert 0 > 0
E        +  where 0 = len([])

tests\models\test_ngram_analytics_service.py:467: AssertionError
---------------------------- Captured stdout call -----------------------------
Exception during query: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target. Rolling back transaction.
Exception during query: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target. Rolling back transaction.
---------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 892, in summarize_session_ngrams
    self.add_speed_summary_for_session(sid)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 1084, in add_speed_summary_for_session
    self.db.execute(
    ~~~~~~~~~~~~~~~^
        insert_hist_sql,
        ^^^^^^^^^^^^^^^^
        (user_id, keyboard_id, session_id, user_id, keyboard_id, keyboard_id),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 641, in execute
    self._translate_and_raise(e)
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 558, in _translate_and_raise
    raise ConstraintError(f"Constraint violation: {e}") from e
db.exceptions.ConstraintError: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 626, in execute
    cursor.execute(query, params)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 892, in summarize_session_ngrams
    self.add_speed_summary_for_session(sid)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "D:\SeanDevLocal\AITypingTrainer\models\ngram_analytics_service.py", line 1084, in add_speed_summary_for_session
    self.db.execute(
    ~~~~~~~~~~~~~~~^
        insert_hist_sql,
        ^^^^^^^^^^^^^^^^
        (user_id, keyboard_id, session_id, user_id, keyboard_id, keyboard_id),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 641, in execute
    self._translate_and_raise(e)
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^^
  File "D:\SeanDevLocal\AITypingTrainer\db\database_manager.py", line 558, in _translate_and_raise
    raise ConstraintError(f"Constraint violation: {e}") from e
db.exceptions.ConstraintError: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
------------------------------ Captured log call ------------------------------
ERROR    models.ngram_analytics_service:ngram_analytics_service.py:1093 Error in AddSpeedSummaryForSession for session session_1: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
WARNING  models.ngram_analytics_service:ngram_analytics_service.py:896 add_speed_summary_for_session failed for session_1
ERROR    models.ngram_analytics_service:ngram_analytics_service.py:1093 Error in AddSpeedSummaryForSession for session session_2: Constraint violation: NOT NULL constraint failed: ngram_speed_summary_hist.meets_target
WARNING  models.ngram_analytics_service:ngram_analytics_service.py:896 add_speed_summary_for_session failed for session_2
______ TestNGramAnalyticsService.test_history_table_schema_compatibility ______

self = <AITypingTrainer.tests.models.test_ngram_analytics_service.TestNGramAnalyticsService object at 0x000002906728F680>
temp_db = <db.database_manager.DatabaseManager object at 0x00000290685D87C0>

    def test_history_table_schema_compatibility(self, temp_db: DatabaseManager) -> None:
        """Test objective: Verify history table schema matches current table.
    
        Tests that the history table has the same essential columns as
        the current table plus additional history-specific fields.
        """
        ngram_manager = NGramManager(temp_db)
        service = NGramAnalyticsService(temp_db, ngram_manager)
    
        # Verify table schemas are compatible
        current_schema = temp_db.fetchall("PRAGMA table_info(ngram_speed_summary_curr)")
        history_schema = temp_db.fetchall("PRAGMA table_info(ngram_speed_summary_hist)")
    
        assert len(current_schema) > 0, "Current table should exist"
        assert len(history_schema) > 0, "History table should exist"
    
        # Check that history table has all essential columns from current table
        current_columns = {str(col.get("name")) for col in current_schema}
        history_columns = {str(col.get("name")) for col in history_schema}
    
        essential_columns = {
            "user_id",
            "keyboard_id",
            "ngram_text",
            "ngram_size",
            "decaying_average_ms",
            "target_performance_pct",
            "sample_count",
        }
    
        assert essential_columns.issubset(current_columns), (
            "Current table missing essential columns"
        )
        assert essential_columns.issubset(history_columns), (
            "History table missing essential columns"
        )
    
        # History table should have additional history-specific columns
>       assert "measurement_date" in history_columns, "History table should have measurement_date"
E       AssertionError: History table should have measurement_date
E       assert 'measurement_date' in {'user_id', 'ngram_size', 'sample_count', 'updated_dt', 'decaying_average_ms', 'keyboard_id', 'history_id', 'target_speed_ms', 'target_performance_pct', 'meets_target', 'ngram_text', 'session_id'}

tests\models\test_ngram_analytics_service.py:511: AssertionError
=========================== short test summary info ===========================
FAILED tests/models/test_ngram_analytics_service.py::TestNGramAnalyticsService::test_dual_insert_creates_records_in_both_tables - AssertionError: History table should have records
assert 0 > 0
FAILED tests/models/test_ngram_analytics_service.py::TestNGramAnalyticsService::test_history_table_accumulates_all_records - db.exceptions.ConstraintError: Constraint violation: UNIQUE constraint failed: practice_sessions.session_id
FAILED tests/models/test_ngram_analytics_service.py::TestNGramAnalyticsService::test_get_ngram_history_retrieval - AssertionError: Should return history records
assert 0 > 0
 +  where 0 = len([])
FAILED tests/models/test_ngram_analytics_service.py::TestNGramAnalyticsService::test_history_table_schema_compatibility - AssertionError: History table should have measurement_date
assert 'measurement_date' in {'user_id', 'ngram_size', 'sample_count', 'updated_dt', 'decaying_average_ms', 'keyboard_id', 'history_id', 'target_speed_ms', 'target_performance_pct', 'meets_target', 'ngram_text', 'session_id'}
======================== 4 failed, 10 passed in 2.35s =========================
